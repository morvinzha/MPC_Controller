################################
#    Dynamic Model
#
#
################################


#    State Part
#
#
function dyn_f(x)
dotx=Array(Float64,8)					#X
dotx[1]=x[6]*(x[3]*cos(x[4]))			#x
dotx[2]=x[6]*(x[3]*sin(x[4]))			#y
dotx[3]=x[6]*(0+x[7])					#V
dotx[4]=x[6]*(x[5])						#Angle
dotx[5]=x[6]*(0+x[8])					#Omega
dotx[6]=0								#time
dotx[7]=0								#accelerate
dotx[8]=0								#angular accelerate
return dotx
end

function jac_dyn_f(x)
jac_dotx=Array(Float64,8,8)																		#X
jac_dotx[1,:]=[0 0 x[6]*cos(x[4]) x[6]*x[3]*(-sin(x[4])) 0 x[3]*cos(x[4]) 0 0]					#x
jac_dotx[2,:]=[0 0 x[6]*sin(x[4]) x[6]*x[3]*cos(x[4]) 0 x[3]*sin(x[4]) 0 0]						#y
jac_dotx[3,:]=[0 0 0 0 0 x[7] x[6] 0]															#V
jac_dotx[4,:]=[0 0 0 0 x[6] x[5] 0 0]															#Angle
jac_dotx[5,:]=[0 0 0 0 0 x[8] 0 x[6]]															#Omega
jac_dotx[6:8,:]=zeros(3,8)
return jac_dotx
end


const gravity=9.8
Ldis=0.2
tao_k=3.13e2
tao_b=7.5e4
Iner=eye(3)
Iner[1,1]=2
Iner[2,2]=2
Iner[3,3]=5
invIner=inv(Iner)

function dyn_uav_f(x)
dotx=Array(Float64,17)
dotx[1:3]	=	x[4:6]*x[13]	#rx,ry,rz
dotx[4:6]	=	([0;0;-gravity]+MapB2D(x[7:9])*TB(x[14:17]))*x[13]
dotx[7:9]	=	inv(Rot(x[7:9]))*x[10:12]*x[13]	#yaw pitch roll
dotx[10:12] =	x[13]*(invIner*taoB(x[14:17])-invIner*[(Iner[2,2]-Iner[3,3])*x[11]*x[12];(Iner[2,2]-Iner[3,3])*x[10]*x[12];(Iner[2,2]-Iner[3,3])*x[10]*x[11]])	#w pitch,w row,w yaw
dotx[13]	=	0	#T
dotx[14]	=	0	#behind motor(-y)
dotx[15]	=	0	#front motor(y)
dotx[16]	=	0	#left motor(-x)
dotx[17]	=	0	#right motor(x)
return dotx
end

function TB(w)
Tb=zeros(3,1)
Tb[3]=norm(w)^2
return Tb
end

function taoB(w)
tao=zeros(3,1)
m1=w[1]^2-w[3]^2
m2=w[2]^2-w[4]^2
tao[1]=Ldis*tao_k*m1
tao[2]=Ldis*tao_k*m2
tao[3]=tao_b*(m1+m2)
return tao
end

function Rot(x)
	return [1 0 -sin(x[2]);0 cos(x[1]) cos(x[2])sin(x[1]);0 -sin(x[1]) cos(x[2])cos(x[1])]
end

function MapB2D(x)
	return [cos(x[1])cos(x[3])-cos(x[2])sin(x[1])sin(x[3]) -cos(x[3])sin(x[1])-cos(x[1])cos(x[2])sin(x[3]) sin(x[2])sin(x[3]);cos(x[2])cos(x[3])sin(x[1])+cos(x[1])sin(x[3]) cos(x[1])cos(x[2])cos(x[3])-sin(x[1])sin(x[3]) -cos(x[3])sin(x[2]);sin(x[1])sin(x[2]) cos(x[1])sin(x[2]) cos(x[2])]
end


################################
# 	TBD
#
function jac_dyn_uav_f(x)
jac_dotx=Array(Float64,17,17)
jac_dotx[1,:]=[0 0 0 x[13]	0		0]	
jac_dotx[2,:]=[0 0 0 0 		x[13]	0]
jac_dotx[3,:]=[0 0 0 0 		0 		x[13]]	
jac_dotx[4,:]=[0 0 0]	
jac_dotx[5,:]=[0 0 0]	
jac_dotx[6,:]=[0 0 0]	
jac_dotx[7,:]=[0 0 0]	
jac_dotx[8,:]=[0 0 0]
jac_dotx[9,:]=[0 0 0]	
jac_dotx[10,:]=[0 0 0]	
jac_dotx[11,:]=[0 0 0]	
jac_dotx[12,:]=[0 0 0]	
jac_dotx[13,:]=[0 0 0]	
jac_dotx[14,:]=[0 0 0]	
jac_dotx[15,:]=[0 0 0]	
jac_dotx[16,:]=[0 0 0]	
jac_dotx[17,:]=[0 0 0]		
end
################################
#   Differentiation function 
#	Input	--	Output
#	r			v*T
#	v			a*T
#	T			0
#	a			0
function dyn(y)
	return [y[2]*y[3];y[4]*y[3];0;0]
end

################################
#	Jacobian of differential mapping
#	Input	--	Output
#	r			1	T	v	0
#	v			0	0	a	T	
#	T			0	0	0	0
#	a			0	0	0	0
function jac_dyn(y)
	return [0 y[3] y[2] 0;0 0 y[4] y[3];0 0 0 0;0 0 0 0;]
end
